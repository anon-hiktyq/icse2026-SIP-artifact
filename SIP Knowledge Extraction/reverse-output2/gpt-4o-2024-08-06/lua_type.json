"```json\n{\n  \"c_file\": \"#if !defined(__LUA_TYPE_H__)\\n#define __LUA_TYPE_H__\\n\\n#include \\\"../../lua.h\\\"\\n\\nvoid lua_typeFun(void *p);\\n\\n/* 检查给定索引处的值是否有效，并返回其类型 */\\ntypedef struct __LuaType\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int idx;   /* 栈中的索引，用于获取值 */\\n   /* 输出端口 */\\n   int *ret; /* 结果指针，存储值的类型或LUA_TNONE */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机指针 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaType;\\n\\n#endif // __LUA_TYPE_H__\\n\",\n  \"h_file\": \"#include \\\"LuaType.h\\\"\\n\\nvoid lua_typeFun(void *p)\\n{\\n    LuaType *pIp = (LuaType*)p;\\n    if (pIp->L == NULL || pIp->ret == NULL) {\\n        return;\\n    }\\n    if (pIp->idx < 0 || pIp->idx >= lua_gettop(pIp->L)) {\\n        *(pIp->ret) = LUA_TNONE;  /* 索引无效，返回LUA_TNONE */\\n    } else {\\n        *(pIp->ret) = lua_type(pIp->L, pIp->idx);  /* 返回值的类型 */\\n    }\\n    return;\\n}\"\n}\n```"