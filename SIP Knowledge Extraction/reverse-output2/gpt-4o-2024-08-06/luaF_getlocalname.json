"```json\n{\n  \"c_file\": \"#if !defined(__LUAF_GETLOCALNAME_H__)\\n#define __LUAF_GETLOCALNAME_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaF_getlocalnameFun(void *p);\\n\\n/* 查找并返回在特定程序计数器位置处活动的局部变量的名称 */\\ntypedef struct __LuaFGetLocalName\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const Proto *f;   /* 函数的原型信息，包含局部变量信息 */\\n   int local_number; /* 要查找的局部变量的编号 */\\n   int pc;           /* 程序计数器，用于确定变量的活动范围 */\\n   /* 输出端口 */\\n   const char *ret;  /* 找到的局部变量的名称，若未找到则为NULL */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaFGetLocalName;\\n\\n#endif // __LUAF_GETLOCALNAME_H__\\n\",\n  \"h_file\": \"#include \\\"LuaFGetLocalName.h\\\"\\n\\nvoid luaF_getlocalnameFun(void *p)\\n{\\n    LuaFGetLocalName *pIp = (LuaFGetLocalName*)p;\\n    const char *name = NULL;\\n\\n    /* 遍历局部变量信息，查找特定的变量 */\\n    for (int i = 0; i < pIp->f->size; i++)\\n    {\\n        if (pIp->f->locvars[i].startpc <= pIp->pc && pIp->f->locvars[i].endpc >= pIp->pc)\\n        {\\n            if (i == pIp->local_number)\\n            {\\n                name = pIp->f->locvars[i].varname;\\n                break;\\n            }\\n        }\\n    }\\n\\n    pIp->ret = name;\\n    return;\\n}\\n\"\n}\n```"