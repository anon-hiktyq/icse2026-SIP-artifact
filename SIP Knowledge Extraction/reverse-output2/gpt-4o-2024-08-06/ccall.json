"```json\n{\n  \"c_file\": \"#if !defined(__CCALLFUN_H__)\\n#define __CCALLFUN_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid ccallFun(void *p);\\n\\n/* 处理 Lua 的 C 函数调用 */\\ntypedef struct __ccallFun\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int nResults;   /* 期望从调用中返回的结果数量 */\\n   l_uint32 inc;   /* 用于增加 C 调用计数的增量值 */\\n   /* 输入输出端口 */\\n   lua_State *L;   /* Lua 状态机指针 */\\n   StkId func;     /* 表示在 Lua 栈中的函数位置 */\\n} ccallFun;\\n\\n#endif // __CCALLFUN_H__\\n\",\n  \"h_file\": \"#include \\\"ccallFun.h\\\"\\n\\nvoid ccallFun(void *p)\\n{\\n    ccallFun *pLua = (ccallFun*)p;\\n    // 检查调用次数限制\\n    if (pLua->inc >= MAX_CALLS) {\\n        // 如果达到最大限制，调用检查函数\\n        checkStack(pLua->L);\\n    }\\n    // 执行 Lua 函数调用\\n    lua_call(pLua->L, pLua->func, pLua->nResults);\\n    return;\\n}\"\n}\n```"