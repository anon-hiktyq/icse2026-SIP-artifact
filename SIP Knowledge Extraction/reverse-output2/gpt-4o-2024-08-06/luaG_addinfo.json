"```json\n{\n  \"c_file\": \"#if !defined(__LUAG_ADDINFO_H__)\\n#define __LUAG_ADDINFO_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaG_addinfoFun(void *p);\\n\\n/* 在Lua错误信息中添加源文件和行号信息 */\\ntypedef struct __LuaGAddInfo\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int line;             /* 源代码中的行号 */\\n   /* 输出端口 */\\n   const char *ret;      /* 格式化后的错误信息字符串 */\\n   /* 输入输出端口 */\\n   lua_State *L;         /* Lua状态 */\\n   const char *msg;      /* 错误消息 */\\n   TString *src;         /* 源文件信息 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaGAddInfo;\\n\\n#endif // __LUAG_ADDINFO_H__\",\n  \"h_file\": \"#include \\\"LuaGAddInfo.h\\\"\\n\\nvoid luaG_addinfoFun(void *p)\\n{\\n    LuaGAddInfo *pIp = (LuaGAddInfo*)p;\\n    // 假设有一个函数formatErrorInfo用于格式化错误信息\\n    pIp->ret = formatErrorInfo(pIp->L, pIp->msg, pIp->src, pIp->line);\\n    return;\\n}\"\n}\n```"