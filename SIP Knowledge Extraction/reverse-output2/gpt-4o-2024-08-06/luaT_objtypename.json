"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_OBJTYPENAME_H__)\\n#define __LUAT_OBJTYPENAME_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaT_objtypenameFun(void *p);\\n\\n/* 获取 Lua 对象的类型名 */\\ntypedef struct __luaT_objtypename\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   /* 输出端口 */\\n   const char *ret; /* 返回的类型名称 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua 状态 */\\n   const TValue *o; /* 待检查的 Lua 对象 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaT_objtypename;\\n\\n#endif // __LUAT_OBJTYPENAME_H__\\n\",\n  \"h_file\": \"#include \\\"luaT_objtypename.h\\\"\\n\\nvoid luaT_objtypenameFun(void *p)\\n{\\n    luaT_objtypename *pIp = (luaT_objtypename*)p;\\n    const char *typename = NULL;\\n\\n    if (lua_getmetatable(pIp->L, pIp->o)) {\\n        lua_pushstring(pIp->L, \\\"__name\\\");\\n        lua_rawget(pIp->L, -2);\\n        if (lua_isstring(pIp->L, -1)) {\\n            typename = lua_tostring(pIp->L, -1);\\n        }\\n        lua_pop(pIp->L, 2);\\n    }\\n\\n    if (!typename) {\\n        typename = lua_typename(pIp->L, lua_type(pIp->L, pIp->o));\\n    }\\n\\n    pIp->ret = typename;\\n    return;\\n}\\n\"\n}\n```"