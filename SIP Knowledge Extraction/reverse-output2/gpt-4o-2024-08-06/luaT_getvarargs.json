"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_GETVARARGS_H__)\\n#define __LUAT_GETVARARGS_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaT_getvarargsFun(void *p);\\n\\n/* Retrieves a specified number of extra arguments from a Lua function call */\\ntypedef struct __luaT_getvarargs\\n{\\n   /* Interface function */\\n   Fun fun;\\n   /* Input interfaces */\\n   int wanted; /* The number of extra arguments desired. If negative, all available extra arguments are retrieved. */\\n   /* In-out interfaces */\\n   lua_State *L; /* The Lua state, which holds the stack and other execution information. */\\n   CallInfo *ci; /* The call information for the current function. */\\n   StkId where; /* The stack position where the extra arguments should be placed. */\\n} luaT_getvarargs;\\n\\n#endif // __LUAT_GETVARARGS_H__\\n\",\n  \"h_file\": \"#include \\\"luaT_getvarargs.h\\\"\\n\\nvoid luaT_getvarargsFun(void *p)\\n{\\n    luaT_getvarargs *pIp = (luaT_getvarargs*)p;\\n    int available = lua_gettop(pIp->L) - pIp->ci->func - 1;\\n    int n = pIp->wanted < 0 ? available : pIp->wanted;\\n    n = n > available ? available : n;\\n\\n    lua_settop(pIp->L, pIp->ci->func + 1 + n);\\n    for (int i = 0; i < n; i++) {\\n        lua_pushvalue(pIp->L, pIp->ci->func + 1 + i);\\n        lua_replace(pIp->L, pIp->where + i);\\n    }\\n    for (int i = n; i < pIp->wanted; i++) {\\n        lua_pushnil(pIp->L);\\n        lua_replace(pIp->L, pIp->where + i);\\n    }\\n    return;\\n}\"\n}\n```"