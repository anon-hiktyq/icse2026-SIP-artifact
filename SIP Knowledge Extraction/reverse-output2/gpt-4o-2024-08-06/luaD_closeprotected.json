"```json\n{\n  \"c_file\": \"#if !defined(__LUAD_CLOSEPROTECTED_H__)\\n#define __LUAD_CLOSEPROTECTED_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaD_closeprotectedFun(void *p);\\n\\n/* 安全关闭 Lua 上值相关结构 */\\ntypedef struct __luaD_closeprotected\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   ptrdiff_t level; /* 要恢复的堆栈级别 */\\n   TStatus status;  /* 当前的状态 */\\n   /* 输出端口 */\\n   TStatus *ret;    /* 返回状态指针 */\\n   /* 输入输出端口 */\\n   lua_State *L;    /* Lua 状态机指针 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaD_closeprotected;\\n\\n#endif // __LUAD_CLOSEPROTECTED_H__\\n\",\n  \"h_file\": \"#include \\\"luaD_closeprotected.h\\\"\\n\\nvoid luaD_closeprotectedFun(void *p)\\n{\\n    luaD_closeprotected *pIp = (luaD_closeprotected*)p;\\n\\n    /* 处理逻辑 */\\n    if (pIp->status != LUA_OK) /* 检查状态是否正常 */\\n    {\\n        /* 恢复并重试逻辑 */\\n        luaD_recover(pIp->L, pIp->level);\\n    }\\n    else\\n    {\\n        /* 正常关闭逻辑 */\\n        luaD_close(pIp->L);\\n    }\\n\\n    /* 更新返回状态 */\\n    *pIp->ret = pIp->status;\\n\\n    return;\\n}\\n\"\n}\n```"