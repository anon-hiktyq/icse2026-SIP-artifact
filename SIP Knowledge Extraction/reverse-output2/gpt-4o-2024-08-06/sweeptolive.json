"```json\n{\n  \"c_file\": \"#if !defined(__SWEEPTOLIVE_H__)\\n#define __SWEEPTOLIVE_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid sweeptoliveFun(void *p);\\n\\n/* Sweep to live function structure */\\ntypedef struct __SweepToLive\\n{\\n   /* Interface function */\\n   Fun fun;\\n   /* Input ports */\\n   /* Output ports */\\n   GCObject **ret; /* Pointer to the result of the sweep operation */\\n   /* Input/output ports */\\n   lua_State *L; /* The current Lua state */\\n   GCObject **p; /* Pointer to the current object being processed */\\n   /* State variables */\\n   /* Parameter variables */\\n} SweepToLive;\\n\\n#endif // __SWEEPTOLIVE_H__\\n\",\n  \"h_file\": \"#include \\\"SweepToLive.h\\\"\\n\\nvoid sweeptoliveFun(void *p)\\n{\\n    SweepToLive *pIp = (SweepToLive*)p;\\n    GCObject **current = pIp->p;\\n    GCObject **result = NULL;\\n    \\n    /* Process objects until no new objects are found */\\n    while (current != NULL)\\n    {\\n        /* Update the pointer to the current object being processed */\\n        pIp->p = current;\\n        \\n        /* Perform sweep operation */\\n        // Implement the sweep logic here\\n        \\n        /* Update result pointer */\\n        result = current;\\n        \\n        /* Move to the next object */\\n        current = /* logic to get next object */;\\n    }\\n    \\n    /* Set the result of the sweep operation */\\n    pIp->ret = result;\\n    \\n    return;\\n}\\n\"\n}\n```"