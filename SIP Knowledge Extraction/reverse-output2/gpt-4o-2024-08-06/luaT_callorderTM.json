"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_CALLORDERTM_H__)\\n#define __LUAT_CALLORDERTM_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaT_callorderTMFun(void *p);\\n\\n/* 调用Lua tag方法相关结构体 */\\ntypedef struct __luaT_callorderTM\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   TMS event;   /* 要调用的tag方法的事件类型 */\\n   /* 输出端口 */\\n   int *ret; /* 根据tag方法调用结果更新的返回值指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态结构体指针 */\\n   const TValue *p1; /* 第一个操作数 */\\n   const TValue *p2; /* 第二个操作数 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaT_callorderTM;\\n\\n#endif // __LUAT_CALLORDERTM_H__\\n\",\n  \"h_file\": \"#include \\\"luaT_callorderTM.h\\\"\\n\\nvoid luaT_callorderTMFun(void *p)\\n{\\n    luaT_callorderTM *pIp = (luaT_callorderTM*)p;\\n    /* 逻辑实现 */\\n    if (luaT_callTM(pIp->L, pIp->event, pIp->p1, pIp->p2)) {\\n        *(pIp->ret) = 1; /* 成功调用tag方法 */\\n    } else {\\n        *(pIp->ret) = 0; /* 未找到合适的方法，调用错误处理 */\\n        luaT_error(pIp->L, \\\"No suitable tag method found\\\");\\n    }\\n    return;\\n}\\n\"\n}\n```"