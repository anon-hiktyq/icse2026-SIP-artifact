"```json\n{\n  \"c_file\": \"#if !defined(__LUAS_HASH_H__)\\n#define __LUAS_HASH_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaS_hashFun(void *p);\\n\\n/* 计算字符串的哈希值 */\\ntypedef struct __LuaS_Hash\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const char *str;   /* 需要计算哈希值的字符串 */\\n   size_t l;          /* 字符串的长度 */\\n   unsigned int seed; /* 用于哈希计算的种子 */\\n   /* 输出端口 */\\n   unsigned int h;    /* 计算得到的哈希值 */\\n   unsigned int *ret; /* 存储计算结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaS_Hash;\\n\\n#endif // __LUAS_HASH_H__\",\n  \"h_file\": \"#include \\\"LuaS_Hash.h\\\"\\n\\nvoid luaS_hashFun(void *p)\\n{\\n    LuaS_Hash *pIp = (LuaS_Hash*)p;\\n    unsigned int h = pIp->seed;\\n    size_t step = (pIp->l >> 5) + 1;\\n    for (size_t i = 0; i < pIp->l; i += step)\\n    {\\n        h = h ^ ((h << 5) + (h >> 2) + (unsigned int)pIp->str[i]);\\n    }\\n    pIp->h = h;\\n    *pIp->ret = h;\\n    return;\\n}\"\n}\n```"