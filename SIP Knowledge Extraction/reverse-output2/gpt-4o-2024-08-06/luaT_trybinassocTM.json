"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_TRYBINASSOCTM_H__)\\n#define __LUAT_TRYBINASSOCTM_H__\\n\\n#include \\\"../../lua.h\\\"\\n\\nvoid luaT_trybinassocTMFun(void *p);\\n\\n/* luaT_trybinassocTMFun函数根据flip标志决定调用luaT_trybinTM函数的参数顺序进行二元操作的尝试。 */\\ntypedef struct __luaT_trybinassocTM\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int flip; /* 决定调用luaT_trybinTM函数时参数的顺序 */\\n   TMS event; /* 触发的元方法事件 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机指针 */\\n   const TValue *p1; /* 第一个操作数 */\\n   const TValue *p2; /* 第二个操作数 */\\n   StkId res; /* 存储结果的栈位置 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaT_trybinassocTM;\\n\\n#endif // __LUAT_TRYBINASSOCTM_H__\\n\",\n  \"h_file\": \"#include \\\"luaT_trybinassocTM.h\\\"\\n\\nvoid luaT_trybinassocTMFun(void *p)\\n{\\n    luaT_trybinassocTM *pIp = (luaT_trybinassocTM*)p;\\n    /* 根据flip标志决定调用luaT_trybinTM函数的参数顺序 */\\n    if (pIp->flip) {\\n        luaT_trybinTM(pIp->L, pIp->event, pIp->p2, pIp->p1, pIp->res);\\n    } else {\\n        luaT_trybinTM(pIp->L, pIp->event, pIp->p1, pIp->p2, pIp->res);\\n    }\\n    return;\\n}\"\n}\n```"