"```json\n{\n  \"c_file\": \"#if !defined(__LUAM_REALLOC_H__)\\n#define __LUAM_REALLOC_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaM_realloc_Fun(void *p);\\n\\n/* 重新分配内存块 */\\ntypedef struct __LuaMRealloc\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   size_t osize;   /* 原内存块大小 */\\n   size_t nsize;   /* 新内存块大小 */\\n   /* 输出端口 */\\n   void *ret;      /* 新分配的内存块地址 */\\n   /* 输入输出端口 */\\n   lua_State *L;   /* Lua状态 */\\n   Unknown type *block; /* 原内存块地址 */\\n} LuaMRealloc;\\n\\n#endif // __LUAM_REALLOC_H__\\n\",\n  \"h_file\": \"#include \\\"LuaMRealloc.h\\\"\\n\\nvoid luaM_realloc_Fun(void *p)\\n{\\n    LuaMRealloc *pLua = (LuaMRealloc*)p;\\n    size_t osize = pLua->osize;\\n    size_t nsize = pLua->nsize;\\n    void *block = pLua->block;\\n\\n    if (nsize > 0)\\n    {\\n        pLua->ret = luaM_realloc(pLua->L, block, osize, nsize);\\n        if (pLua->ret == NULL)\\n        {\\n            pLua->ret = luaM_realloc(pLua->L, block, osize, nsize);\\n        }\\n        if (pLua->ret != NULL)\\n        {\\n            luaC_checkGC(pLua->L);\\n        }\\n    }\\n    else\\n    {\\n        pLua->ret = NULL;\\n    }\\n    return;\\n}\"\n}\n```"