"```json\n{\n  \"c_file\": \"#if !defined(__RESIZEARRAY_H__)\\n#define __RESIZEARRAY_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid resizearrayFun(void *p);\\n\\n/* 调整数组大小相关结构 */\\ntypedef struct __ResizeArray\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   unsigned int oldasize; /* 旧的数组大小 */\\n   unsigned int newasize; /* 新的数组大小 */\\n   /* 输出端口 */\\n   Value *ret; /* 调整后的数组指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机 */\\n   Table *t; /* 数组所在的表 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} ResizeArray;\\n\\n#endif // __RESIZEARRAY_H__\\n\",\n  \"h_file\": \"#include \\\"ResizeArray.h\\\"\\n\\nvoid resizearrayFun(void *p)\\n{\\n    ResizeArray *pIp = (ResizeArray*)p;\\n\\n    if (pIp->newasize != pIp->oldasize) /* 数组大小变化 */\\n    {\\n        if (pIp->newasize < pIp->oldasize)\\n        {\\n            /* 释放多余内存 */\\n            freeExtraMemory(pIp->L, pIp->t, pIp->newasize);\\n        }\\n        else\\n        {\\n            /* 重新分配内存 */\\n            allocateNewMemory(pIp->L, pIp->t, pIp->newasize);\\n        }\\n        /* 移动数组元素 */\\n        moveArrayElements(pIp->L, pIp->t, pIp->oldasize, pIp->newasize);\\n    }\\n\\n    pIp->ret = getResizedArrayPointer(pIp->L, pIp->t);\\n    return;\\n}\\n\"\n}\n```"