"```json\n{\n  \"c_file\": \"#if !defined(__HASHKEYISEMPTY_H__)\\n#define __HASHKEYISEMPTY_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid hashkeyisemptyFun(void *p);\\n\\n/* 检查哈希表中指定键是否为空 */\\ntypedef struct __HashKeyIsEmpty\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   lua_Unsigned key; /* 用于查找的哈希键值 */\\n   /* 输出端口 */\\n   int *ret; /* 返回值指针，指示键是否为空 */\\n   /* 输入输出端口 */\\n   Table *t; /* 哈希表结构 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} HashKeyIsEmpty;\\n\\n#endif // __HASHKEYISEMPTY_H__\\n\",\n  \"h_file\": \"#include \\\"HashKeyIsEmpty.h\\\"\\n\\nvoid hashkeyisemptyFun(void *p)\\n{\\n    HashKeyIsEmpty *pIp = (HashKeyIsEmpty*)p;\\n    /* 这里可以添加具体的逻辑来检查哈希表中指定键是否为空 */\\n    /* 例如：使用pIp->key来查找pIp->t中的对应项，并将结果存储到pIp->ret中 */\\n    return;\\n}\"\n}\n```"