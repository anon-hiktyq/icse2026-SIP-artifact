"```json\n{\n  \"c_file\": \"#if !defined(__GENMOVERESULTS_H__)\\n#define __GENMOVERESULTS_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid genmoveresultsFun(void *p);\\n\\n/* Rearrange results on the Lua stack */\\ntypedef struct __GenMoveResults\\n{\\n   /* Interface function */\\n   Fun fun;\\n   /* Input ports */\\n   int nres;   /* Number of results available on the stack */\\n   int wanted; /* Number of results desired */\\n   /* Input/Output ports */\\n   lua_State *L; /* Pointer to the Lua state */\\n   StkId res;    /* Stack index where results should be moved */\\n} GenMoveResults;\\n\\n#endif // __GENMOVERESULTS_H__\\n\",\n  \"h_file\": \"#include \\\"GenMoveResults.h\\\"\\n\\nvoid genmoveresultsFun(void *p)\\n{\\n    GenMoveResults *pIp = (GenMoveResults*)p;\\n    int i;\\n    int diff = pIp->wanted - pIp->nres;\\n\\n    if (diff > 0) {\\n        /* Move results to the correct positions and fill with nil if necessary */\\n        for (i = 0; i < pIp->nres; i++) {\\n            setobjs2s(pIp->L, pIp->res + i, pIp->res + i - diff);\\n        }\\n        for (; i < pIp->wanted; i++) {\\n            setnilvalue(s2v(pIp->res + i));\\n        }\\n    } else {\\n        /* Move results to the correct positions */\\n        for (i = 0; i < pIp->wanted; i++) {\\n            setobjs2s(pIp->L, pIp->res + i, pIp->res + i - diff);\\n        }\\n    }\\n    return;\\n}\\n\"\n}\n```"