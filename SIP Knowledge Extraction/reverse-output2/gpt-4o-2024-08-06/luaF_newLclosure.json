"```json\n{\n  \"c_file\": \"#if !defined(__LUAF_NEWLCLOSURE_H__)\\n#define __LUAF_NEWLCLOSURE_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaF_newLclosureFun(void *p);\\n\\n/* 创建新的Lua闭包对象 */\\ntypedef struct __LuaF_NewLclosure\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int nupvals;   /* 新闭包的upvalues数量 */\\n   /* 输出端口 */\\n   LClosure *c; /* 指向新创建的Lua闭包的指针 */\\n   LClosure *ret; /* 返回指向Lua闭包的指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaF_NewLclosure;\\n\\n#endif // __LUAF_NEWLCLOSURE_H__\\n\",\n  \"h_file\": \"#include \\\"LuaF_NewLclosure.h\\\"\\n\\nvoid luaF_newLclosureFun(void *p)\\n{\\n    LuaF_NewLclosure *pIp = (LuaF_NewLclosure*)p;\\n    int i;\\n\\n    /* 分配内存并初始化闭包属性 */\\n    pIp->c = (LClosure*)malloc(sizeof(LClosure) + pIp->nupvals * sizeof(TValue));\\n    pIp->c->nupvalues = pIp->nupvals;\\n\\n    /* 设置upvalues为NULL */\\n    for (i = 0; i < pIp->nupvals; i++)\\n    {\\n        pIp->c->upvals[i] = NULL;\\n    }\\n\\n    /* 返回指向新创建的Lua闭包的指针 */\\n    pIp->ret = pIp->c;\\n    return;\\n}\"\n}\n```"