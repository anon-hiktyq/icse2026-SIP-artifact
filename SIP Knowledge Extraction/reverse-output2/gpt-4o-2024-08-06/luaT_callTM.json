"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_CALLTM_H__)\\n#define __LUAT_CALLTM_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaT_callTMFun(void *p);\\n\\n/* 执行元方法调用 */\\ntypedef struct __luaT_callTM\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入输出端口 */\\n   lua_State *L;        /* Lua状态机指针，表示当前的执行上下文 */\\n   const TValue *f;     /* 函数指针，表示要调用的元方法 */\\n   const TValue *p1;    /* 第一个参数 */\\n   const TValue *p2;    /* 第二个参数 */\\n   const TValue *p3;    /* 第三个参数 */\\n} luaT_callTM;\\n\\n#endif // __LUAT_CALLTM_H__\",\n  \"h_file\": \"#include \\\"luaT_callTM.h\\\"\\n\\nvoid luaT_callTMFun(void *p)\\n{\\n    luaT_callTM *pIp = (luaT_callTM*)p;\\n    \\n    // 将函数和最多三个参数压入栈中\\n    lua_pushvalue(pIp->L, pIp->f);\\n    if (pIp->p1) lua_pushvalue(pIp->L, pIp->p1);\\n    if (pIp->p2) lua_pushvalue(pIp->L, pIp->p2);\\n    if (pIp->p3) lua_pushvalue(pIp->L, pIp->p3);\\n\\n    // 调用函数并根据调用上下文选择适当的调用方式\\n    lua_call(pIp->L, (pIp->p1 ? 1 : 0) + (pIp->p2 ? 1 : 0) + (pIp->p3 ? 1 : 0), LUA_MULTRET);\\n\\n    return;\\n}\"\n}\n```"