"```json\n{\n  \"c_file\": \"#if !defined(__STACKINUSE_H__)\\n#define __STACKINUSE_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid stackinuseFun(void *p);\\n\\n/* 计算Lua栈中正在使用的部分，并确保其最小大小 */\\ntypedef struct __StackInUse\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   lua_State *L;   /* Lua状态机指针 */\\n   /* 输出端口 */\\n   int res;        /* 栈中正在使用的部分大小 */\\n   int *ret;       /* 返回结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} StackInUse;\\n\\n#endif // __STACKINUSE_H__\",\n  \"h_file\": \"#include \\\"StackInUse.h\\\"\\n\\nvoid stackinuseFun(void *p)\\n{\\n    StackInUse *pIp = (StackInUse*)p;\\n    \\n    /* 计算栈中正在使用的部分，并确保其最小大小 */\\n    pIp->res = lua_gettop(pIp->L);  /* 获取栈顶索引，表示正在使用的部分大小 */\\n    *(pIp->ret) = pIp->res;         /* 将结果存储在返回结果指针中 */\\n    \\n    return;\\n}\"\n}\n```"