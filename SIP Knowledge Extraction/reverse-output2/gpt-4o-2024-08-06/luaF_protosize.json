"```json\n{\n  \"c_file\": \"#if !defined(__LUAF_PROTOSIZE_H__)\\n#define __LUAF_PROTOSIZE_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaF_protosizeFun(void *p);\\n\\n/* 计算Proto结构体内存大小 */\\ntypedef struct __LuaF_ProtoSize\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   Proto* p;   /* 指向Proto结构体的指针 */\\n   /* 输出端口 */\\n   lu_mem sz; /* 计算得到的内存大小 */\\n   lu_mem* ret; /* 存储计算结果的内存位置指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaF_ProtoSize;\\n\\n#endif // __LUAF_PROTOSIZE_H__\\n\",\n  \"h_file\": \"#include \\\"LuaF_ProtoSize.h\\\"\\n\\nvoid luaF_protosizeFun(void *p)\\n{\\n    LuaF_ProtoSize *pIp = (LuaF_ProtoSize*)p;\\n\\n    // 初始化内存大小为0\\n    pIp->sz = 0;\\n\\n    // 检查Proto标志是否包含PF_FIXED\\n    if (!(pIp->p->flags & PF_FIXED))\\n    {\\n        // 计算代码、行信息和绝对行信息的大小\\n        pIp->sz += calculateCodeSize(pIp->p);\\n        pIp->sz += calculateLineInfoSize(pIp->p);\\n        pIp->sz += calculateAbsLineInfoSize(pIp->p);\\n    }\\n\\n    // 存储计算结果\\n    *pIp->ret = pIp->sz;\\n\\n    return;\\n}\\n\"\n}\n```"