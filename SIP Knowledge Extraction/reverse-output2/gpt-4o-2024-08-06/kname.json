"```json\n{\n  \"c_file\": \"#if !defined(__KNAMEFUN_H__)\\n#define __KNAMEFUN_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid knameFun(void *p);\\n\\n/* 结构体定义用于存储常量信息 */\\ntypedef struct __KnameFun\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const Proto *p;  /* 指向包含常量的Proto结构体 */\\n   int index;       /* 用于访问Proto结构体中的常量的索引 */\\n   /* 输出端口 */\\n   const char *ret; /* 返回值指示常量是否为字符串（'constant'）或NULL */\\n   /* 输入输出端口 */\\n   const char **name; /* 若常量为字符串则指向常量名，否则为'?' */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} KnameFun;\\n\\n#endif // __KNAMEFUN_H__\",\n  \"h_file\": \"#include \\\"KnameFun.h\\\"\\n\\nvoid knameFun(void *p)\\n{\\n    KnameFun *pIp = (KnameFun*)p;\\n    const Proto *proto = pIp->p;\\n    int idx = pIp->index;\\n    \\n    if (proto->values[idx].type == STRING_TYPE) /* 假设Proto结构体有一个values数组 */\\n    {\\n        *pIp->name = proto->values[idx].stringValue; /* 假设常量值存储在stringValue中 */\\n        pIp->ret = \\\"constant\\\";\\n    }\\n    else\\n    {\\n        *pIp->name = \\\"?\\\";\\n        pIp->ret = NULL;\\n    }\\n    return;\\n}\"\n}\n```"