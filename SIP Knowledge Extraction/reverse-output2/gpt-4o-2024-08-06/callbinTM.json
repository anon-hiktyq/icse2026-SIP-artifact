"```json\n{\n    \"c_file\": \"#if !defined(__CALLBINTM_H__)\\n#define __CALLBINTM_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid callbinTMFun(void *p);\\n\\n/* 在Lua中调用二元操作的tag method */\\ntypedef struct __callbinTM\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   TMS event;   /* 要调用的tag method事件类型 */\\n   /* 输出端口 */\\n   int *ret; /* tag method调用结果的标志 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机指针 */\\n   const TValue *p1; /* 第一个操作数 */\\n   const TValue *p2; /* 第二个操作数 */\\n   StkId res; /* 结果存储位置的栈索引 */\\n} callbinTM;\\n\\n#endif // __CALLBINTM_H__\\n\",\n    \"h_file\": \"#include \\\"callbinTM.h\\\"\\n\\nvoid callbinTMFun(void *p)\\n{\\n    callbinTM *pIp = (callbinTM*)p;\\n    /* 在Lua中调用二元操作的tag method逻辑实现 */\\n    /* 首先尝试第一个操作数的tag method */\\n    if (tryTagMethod(pIp->L, pIp->p1, pIp->event, pIp->res)) {\\n        *pIp->ret = getResultTag(pIp->L, pIp->res);\\n    } else if (tryTagMethod(pIp->L, pIp->p2, pIp->event, pIp->res)) {\\n        /* 如果找不到，则尝试第二个操作数的tag method */\\n        *pIp->ret = getResultTag(pIp->L, pIp->res);\\n    } else {\\n        /* 如果仍然找不到，返回-1 */\\n        *pIp->ret = -1;\\n    }\\n    return;\\n}\\n\"\n}\n```"