"```json\n{\n  \"c_file\": \"#if !defined(__LUAD_SETERROROBJ_H__)\\n#define __LUAD_SETERROROBJ_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaD_seterrorobjFun(void *p);\\n\\n/* 设置Lua错误对象 */\\ntypedef struct __luaD_seterrorobj\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   TStatus errcode;   /* 错误代码 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   lua_State *L;      /* Lua状态机指针 */\\n   StkId oldtop;      /* 旧栈顶指针 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaD_seterrorobj;\\n\\n#endif // __LUAD_SETERROROBJ_H__\\n\",\n  \"h_file\": \"#include \\\"luaD_seterrorobj.h\\\"\\n\\nvoid luaD_seterrorobjFun(void *p)\\n{\\n    luaD_seterrorobj *pIp = (luaD_seterrorobj*)p;\\n    /* 根据错误代码设置Lua状态机的错误对象 */\\n    if (pIp->errcode == LUA_ERRMEM || pIp->errcode == LUA_ERRERR)\\n    {\\n        /* 使用预注册的错误消息或新建的错误消息 */\\n        set_error_message(pIp->L, pIp->errcode);\\n    }\\n    else\\n    {\\n        if (!is_nil(pIp->oldtop))\\n        {\\n            /* 将错误对象移动到旧栈顶 */\\n            move_to_oldtop(pIp->L, pIp->oldtop);\\n        }\\n        else\\n        {\\n            /* 设置为适当的错误消息 */\\n            set_default_error_message(pIp->L);\\n        }\\n    }\\n    return;\\n}\"\n}\n```"