"```json\n{\n  \"c_file\": \"#if !defined(__CLEARSLICETABLE_H__)\\n#define __CLEARSLICETABLE_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid clearNewSliceFun(void *p);\\n\\n/* 清除新切片中的元素 */\\ntypedef struct __ClearSliceTable\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   unsigned int oldasize; /* 旧数组大小 */\\n   unsigned int newasize; /* 新数组大小 */\\n   /* 输入输出端口 */\\n   Table *t; /* 需要清除元素的表 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} ClearSliceTable;\\n\\n#endif // __CLEARSLICETABLE_H__\\n\",\n  \"h_file\": \"#include \\\"ClearSliceTable.h\\\"\\n\\nvoid clearNewSliceFun(void *p)\\n{\\n    ClearSliceTable *pIp = (ClearSliceTable*)p;\\n    unsigned int i;\\n\\n    if (pIp->newasize > pIp->oldasize)\\n    {\\n        for (i = pIp->oldasize; i < pIp->newasize; i++)\\n        {\\n            pIp->t->elements[i] = NULL; /* 将新数组中从旧大小到新大小之间的元素标记为空 */\\n        }\\n    }\\n    return;\\n}\\n\"\n}\n```"