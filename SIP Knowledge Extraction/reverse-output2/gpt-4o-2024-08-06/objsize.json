"```json\n{\n  \"c_file\": \"#if !defined(__OBJSIZE_H__)\\n#define __OBJSIZE_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid objsizeFun(void *p);\\n\\n/* 计算Lua对象的内存大小 */\\ntypedef struct __ObjSize\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   GCObject *o;   /* Lua对象指针 */\\n   /* 输出端口 */\\n   lu_mem res; /* 计算出的对象大小 */\\n   l_mem *ret; /* 存储计算结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} ObjSize;\\n\\n#endif // __OBJSIZE_H__\",\n  \"h_file\": \"#include \\\"ObjSize.h\\\"\\n\\nvoid objsizeFun(void *p)\\n{\\n    ObjSize *pObj = (ObjSize*)p;\\n    /* 根据Lua对象类型计算内存大小 */\\n    switch (pObj->o->tt) {\\n        case LUA_TSTRING:\\n            pObj->res = sizeof(TString) + pObj->o->ts.len;\\n            break;\\n        case LUA_TTABLE:\\n            pObj->res = sizeof(Table) + pObj->o->h.sizearray * sizeof(TValue);\\n            break;\\n        /* 其他类型的计算逻辑 */\\n        default:\\n            pObj->res = 0;\\n            break;\\n    }\\n    /* 存储计算结果 */\\n    *pObj->ret = pObj->res;\\n    return;\\n}\"\n}\n```"