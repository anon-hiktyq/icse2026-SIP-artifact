"```json\n{\n  \"c_file\": \"#if !defined(__LUAO_PUSHFSTRING_H__)\\n#define __LUAO_PUSHFSTRING_H__\\n\\n#include \\\"lua.h\\\"\\n\\nvoid luaO_pushfstringFun(void *p);\\n\\n/* 格式化字符串并压入Lua堆栈 */\\ntypedef struct __luaO_pushfstring\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入输出端口 */\\n   lua_State *L;       /* Lua状态 */\\n   const char *fmt;    /* 格式化字符串 */\\n   /* 输出端口 */\\n   const char *msg;    /* 格式化后的字符串 */\\n   const char *ret;    /* 返回的格式化字符串 */\\n} luaO_pushfstring;\\n\\n#endif // __LUAO_PUSHFSTRING_H__\\n\",\n  \"h_file\": \"#include \\\"luaO_pushfstring.h\\\"\\n\\nvoid luaO_pushfstringFun(void *p)\\n{\\n    luaO_pushfstring *pIp = (luaO_pushfstring*)p;\\n    if (pIp->fmt && pIp->L) {\\n        /* Assuming lua_pushfstring is a function that formats the string and pushes it onto the Lua stack */\\n        pIp->msg = lua_pushfstring(pIp->L, pIp->fmt);\\n        if (!pIp->msg) {\\n            /* Handle error if formatting fails */\\n            lua_error(pIp->L);\\n        }\\n        pIp->ret = pIp->msg;\\n    }\\n    return;\\n}\\n\"\n}\n```"