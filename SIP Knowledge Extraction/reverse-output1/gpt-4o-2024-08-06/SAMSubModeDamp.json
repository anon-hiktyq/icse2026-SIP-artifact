"```json\n{\n    \"c_file\": \"#if !defined(__SAMSUBMODEDAMP_H__)\\n#define __SAMSUBMODEDAMP_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid SAMSubModeDampFun(SAMSubModeDamp *p);\\n\\n/* 计算速率相关信息 */\\ntypedef struct __SAMSubModeDamp\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const float32 *rate;   /* 输入的速率信息数组首地址指针 */\\n   const float32 max;     /* 速率的最大阈值 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n   unint32 countPublic; /* 公共计数器 */\\n   unint32 countMode;   /* 模式计数器 */\\n   unint32 flgMode;     /* 模式标志 */\\n} SAMSubModeDamp;\\n\\n#endif // __SAMSUBMODEDAMP_H__\",\n    \"h_file\": \"#include \\\"SAMSubModeDamp.h\\\"\\n\\nvoid SAMSubModeDampFun(SAMSubModeDamp *p)\\n{\\n    float32 fabsmax = 0.0f;\\n    unint32 i;\\n\\n    for (i = 0; i < sizeof(p->rate) / sizeof(p->rate[0]); i++)\\n    {\\n        if (fabs(p->rate[i]) > fabsmax)\\n        {\\n            fabsmax = fabs(p->rate[i]);\\n        }\\n    }\\n\\n    if (fabsmax > p->max)\\n    {\\n        p->countPublic++;\\n    }\\n\\n    if (p->countPublic > THRESHOLD || p->countMode > THRESHOLD)\\n    {\\n        p->flgMode = TRUE;\\n        p->countPublic = 0;\\n        p->countMode = 0;\\n    }\\n\\n    return;\\n}\"\n}\n```"