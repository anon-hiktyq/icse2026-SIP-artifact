"```json\n{\n    \"c_file\": \"#if !defined(__MATRIXMULTI_H__)\\n#define __MATRIXMULTI_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid MatrixMultiFun(void *p);\\n\\n/* 矩阵乘法功能 */\\ntypedef struct __MatrixMulti\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const float32 *multiplier; /* 乘数矩阵的首地址指针 */\\n   unint08 nrow;             /* 结果矩阵的行数 */\\n   unint08 nrc;              /* 乘数矩阵的列数和被乘数矩阵的行数 */\\n   unint08 ncol;             /* 结果矩阵的列数 */\\n   const float32 *faciend;   /* 被乘数矩阵的首地址指针 */\\n   /* 输入输出端口 */\\n   float32 *product;         /* 结果矩阵的首地址指针，用于存储矩阵乘法的计算结果 */\\n} MatrixMulti;\\n\\n#endif // __MATRIXMULTI_H__\\n\",\n    \"h_file\": \"#include \\\"MatrixMulti.h\\\"\\n\\nvoid MatrixMultiFun(void *p)\\n{\\n    MatrixMulti *pIp = (MatrixMulti*)p;\\n    unint08 i, j, k;\\n    for (i = 0; i < pIp->nrow; i++)\\n    {\\n        for (j = 0; j < pIp->ncol; j++)\\n        {\\n            pIp->product[i * pIp->ncol + j] = 0.0f;\\n            for (k = 0; k < pIp->nrc; k++)\\n            {\\n                pIp->product[i * pIp->ncol + j] += pIp->multiplier[i * pIp->nrc + k] * pIp->faciend[k * pIp->ncol + j];\\n            }\\n        }\\n    }\\n    return;\\n}\\n\"\n}\n```"