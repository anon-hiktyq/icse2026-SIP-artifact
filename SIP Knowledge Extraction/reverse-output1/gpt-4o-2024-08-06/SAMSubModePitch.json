"```json\n{\n  \"c_file\": \"#if !defined(__SAMSUBMODEPITCH_H__)\\n#define __SAMSUBMODEPITCH_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid SAMSubModePitchFun(SAMSubModePitch *p);\\n\\n/* 调整控制模式和相关参数 */\\ntypedef struct __SAMSubModePitch\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const SDSSData *pSDS;   /* 指向SDSS数据结构的指针，包含姿态控制系统的状态信息 */\\n   unint32 countPublic;    /* 公共计数器，用于跟踪某些条件的持续时间 */\\n   unint32 countMode;      /* 模式计数器，用于判断当前模式的持续时间 */\\n   unint32 flgMode;        /* 当前控制模式的标志 */\\n   /* 输入输出端口 */\\n   SController *pCtrl;     /* 指向控制器数组的指针，包含各个控制通道的状态 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} SAMSubModePitch;\\n\\n#endif // __SAMSUBMODEPITCH_H__\\n\",\n  \"h_file\": \"#include \\\"SAMSubModePitch.h\\\"\\n\\nvoid SAMSubModePitchFun(SAMSubModePitch *p)\\n{\\n    /* 根据姿态控制系统的状态和输入的偏航角速度信号，调整控制模式和相关参数 */\\n    /* 当偏航角速度超过某个阈值且持续时间超过一定值时，切换到巡航模式；否则，保持当前模式。 */\\n    // 具体实现代码\\n    return;\\n}\\n\"\n}\n```"