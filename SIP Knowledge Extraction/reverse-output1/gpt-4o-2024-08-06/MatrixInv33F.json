"```json\n{\n  \"c_file\": \"#if !defined(__MATRIXINV33F_H__)\\n#define __MATRIXINV33F_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid MatrixInv33FFun(void *p);\\n\\n/* 计算3x3矩阵的逆矩阵 */\\ntypedef struct __MatrixInv33F\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const float32 *src; /* 源矩阵的首地址指针 */\\n   /* 输出端口 */\\n   unint08 bAbleInv; /* 矩阵是否可逆的标志 */\\n   unint08 *ret;    /* 返回值指针 */\\n   /* 输入输出端口 */\\n   float32 *inv;    /* 存储逆矩阵的数组首地址指针 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} MatrixInv33F;\\n\\n#endif // __MATRIXINV33F_H__\\n\",\n  \"h_file\": \"#include \\\"MatrixInv33F.h\\\"\\n\\nvoid MatrixInv33FFun(void *p)\\n{\\n    MatrixInv33F *pIp = (MatrixInv33F*)p;\\n    // Implement the inversion logic here\\n    // Use pIp->src to access the source matrix\\n    // Use pIp->inv to store the inverse matrix\\n    // Set pIp->bAbleInv to TRUE32 or FALSE32 based on invertibility\\n    // Set pIp->ret to point to bAbleInv\\n    return;\\n}\"\n}\n```"