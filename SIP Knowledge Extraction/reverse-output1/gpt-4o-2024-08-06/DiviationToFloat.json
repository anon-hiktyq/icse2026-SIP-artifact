"```json\n{\n    \"c_file\": \"#if !defined(__DIVIATIONTOFLOAT_H__)\\n#define __DIVIATIONTOFLOAT_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid DiviationToFloatFun(void *p);\\n\\n/* 将输入的整数偏差值转换为浮点数结果，并存储在指定位置 */\\ntypedef struct __DiviationToFloat\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   unint16 input;   /* 输入的整数值 */\\n   unint16 mask;    /* 用于提取输入中有效位的掩码 */\\n   unint16 offset;  /* 偏移量 */\\n   float32 LSB;     /* 最小有效位对应的浮点数值 */\\n   /* 输出端口 */\\n   float32 fresult; /* 计算得到的浮点数结果 */\\n   float32 *ret;    /* 存储计算结果的地址 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} DiviationToFloat;\\n\\n#endif // __DIVIATIONTOFLOAT_H__\\n\",\n    \"h_file\": \"#include \\\"DiviationToFloat.h\\\"\\n\\nvoid DiviationToFloatFun(void *p)\\n{\\n    DiviationToFloat *pIp = (DiviationToFloat*)p;\\n    unint16 temp;\\n    \\n    temp = (pIp->input & pIp->mask) + pIp->offset;\\n    pIp->fresult = temp * pIp->LSB;\\n    *(pIp->ret) = pIp->fresult;\\n    \\n    return;\\n}\"\n}\n```"