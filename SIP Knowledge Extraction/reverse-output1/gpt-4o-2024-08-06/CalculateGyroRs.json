"```json\n{\n  \"c_file\": \"#if !defined(__CALCULATEGYRORS_H__)\\n#define __CALCULATEGYRORS_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid CalculateGyroRsFun(void *p);\\n\\n/* 计算陀螺相关矩阵 */\\ntypedef struct __CalculateGyroRs\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   unint08 JoinTotal;   /* 参加定姿的陀螺个数 */\\n   unint16 gyroStatus0; /* 陀螺状态新 */\\n   unint08 *SignFlag;   /* 参加定姿的陀螺序号数组指针 */\\n   /* 输出端口 */\\n   unint08 flgGryoCalc; /* 陀螺计算标志 */\\n   float32 Rtemp[3][5]; /* 矩阵计算结果 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   unint16 gyroStatus1; /* 陀螺状态旧 */\\n   /* 参数变量 */\\n   float32 VG[9][3];\\n} CalculateGyroRs;\\n\\n#endif // __CALCULATEGYRORS_H__\",\n  \"h_file\": \"#include \\\"CalculateGyroRs.h\\\"\\n\\nvoid CalculateGyroRsFun(void *p)\\n{\\n    CalculateGyroRs *pIp = (CalculateGyroRs*)p;\\n\\tunint08 i ;\\n \\tunint08 j ;\\n\\tunint08 k ;\\n \\tfloat32 Rgtrans[3][5] ;\\n \\tfloat32 Rs[3][3] ;\\n\\tfloat32 RsInv[3][3] ;\\n \\tfloat32 Rgtemp[5][3] ;\\n\\n \\tpIp->JoinTotal = MIN(pIp->JoinTotal, 5) ;\\n\\n\\tif (pIp->gyroStatus0 != pIp->gyroStatus1) /* 有陀螺切换 */\\n\\t{\\n\\t\\tpIp->flgGryoCalc = TRUE ; /* 置陀螺计算标志 */\\n\\n\\t\\tfor ( j=0 ; j<pIp->JoinTotal ; j++ ) /* 参加定姿的陀螺个数 */\\n\\t\\t{\\n\\t\\t\\tk = pIp->SignFlag[j] ; /* 按从小到大排列依次选5个，不足5个选余下的 */\\n\\n\\t\\t\\tfor ( i=0 ;  i<3 ; i++ )\\n\\t\\t\\t{\\n\\t\\t\\t\\tRgtemp[j][i] = pIp->VG[k][i] ; /* n*3的安装阵R */\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( i = pIp->JoinTotal ; i<5 ; i++ ) /* 不用的（5-JoinTotal）维，清零 */\\n\\t\\t{\\n\\t\\t\\tfor ( j=0 ; j<3 ; j++ )\\n\\t\\t\\t{\\n\\t\\t\\t\\tRgtemp[i][j] = 0.0f;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (pIp->JoinTotal >= 3) /* 若大于三个陀螺工作可以计算角速度 */\\n\\t\\t{\\n\\n\\t\\t\\tMatrixTran(&Rgtrans[0][0], &Rgtemp[0][0], 5, 3) ; /* Rg->Rgtrans */\\n\\t\\t\\tMatrixMulti(&Rs[0][0], &Rgtrans[0][0], &Rgtemp[0][0], 3, 5, 3) ; /* R*RT->RS */\\n\\t\\t\\tMatrixInv33F(&RsInv[0][0], &Rs[0][0]) ; /* INV(RS)->RsInv */\\n\\t\\t\\tMatrixMulti(&pIp->Rtemp[0][0], &RsInv[0][0], &Rgtrans[0][0], 3, 3, 5) ; /* RsInv*Rgtrans->Rtemp */\\n\\t\\t}\\n\\t\\tpIp->gyroStatus1 = pIp->gyroStatus0 ;\\n\\t}\\n    return;\\n}\"\n}\n```"