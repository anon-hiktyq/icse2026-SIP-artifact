"```json\n{\n  \"c_file\": \"#if !defined(__CCALLFUN_H__)\\n#define __CCALLFUN_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid ccallFun(void *p);\\n\\n/* 处理Lua状态调用信息的函数 */\\ntypedef struct __ccallFun\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p;   /* 指向ccall结构体的指针，包含函数调用所需的信息 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态信息 */\\n   StkId func;   /* 堆栈中的函数指针 */\\n   /* 状态变量 */\\n   l_uint32 nCcalls; /* 嵌套的非可中断或C调用的数量 */\\n   /* 参数变量 */\\n   int nResults; /* 预期的结果数量 */\\n   l_uint32 inc; /* 调用嵌套级别的增量 */\\n} ccallFun;\\n\\n#endif // __CCALLFUN_H__\\n\",\n  \"h_file\": \"#include \\\"ccallFun.h\\\"\\n\\nvoid ccallFun(void *p)\\n{\\n    ccallFun *pIp = (ccallFun*)p;\\n    \\n    /* 增加或减少嵌套的非可中断或C调用的数量 */\\n    pIp->nCcalls += pIp->inc;\\n\\n    /* 执行相关的Lua函数调用 */\\n    if (pIp->L && pIp->func)\\n    {\\n        lua_call(pIp->L, pIp->func, pIp->nResults);\\n    }\\n\\n    return;\\n}\\n\"\n}\n```"