"```json\n{\n  \"c_file\": \"#if !defined(__CHANGEDLINE_H__)\\n#define __CHANGEDLINE_H__\\n\\n#include \\\"../../Proto.h\\\"\\n\\nvoid changedlineFun(void *p);\\n\\n/* 计算两个程序计数器之间的行差异 */\\ntypedef struct __ChangedLine\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const Proto *p; /* 函数的原型信息，包含调试信息和其他元数据 */\\n   int oldpc;      /* 旧的程序计数器位置 */\\n   int newpc;      /* 新的程序计数器位置 */\\n   /* 输出端口 */\\n   int *ret;       /* 返回结果指针，指示行差异是否成功计算 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} ChangedLine;\\n\\n#endif // __CHANGEDLINE_H__\\n\",\n  \"h_file\": \"#include \\\"ChangedLine.h\\\"\\n\\nvoid changedlineFun(void *p)\\n{\\n    ChangedLine *pIp = (ChangedLine*)p;\\n    int lineDiff = 0;\\n\\n    if (pIp->newpc != pIp->oldpc) /* 计算行差异 */\\n    {\\n        lineDiff = pIp->newpc - pIp->oldpc;\\n\\n        if (lineDiff != 0) /* 如果行差异成功计算 */\\n        {\\n            *pIp->ret = lineDiff;\\n        }\\n        else\\n        {\\n            *pIp->ret = -1; /* 行差异计算失败 */\\n        }\\n    }\\n    else\\n    {\\n        *pIp->ret = 0; /* 没有行差异 */\\n    }\\n\\n    return;\\n}\\n\"\n}\n```"