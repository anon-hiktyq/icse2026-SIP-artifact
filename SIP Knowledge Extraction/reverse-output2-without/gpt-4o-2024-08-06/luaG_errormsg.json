"```json\n{\n  \"c_file\": \"#if !defined(__LUAG_ERRORMSG_H__)\\n#define __LUAG_ERRORMSG_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaG_errormsgFun(void *p);\\n\\n/* 处理Lua错误信息 */\\ntypedef struct __luaG_errormsg\\n{\\n   /* 接口函数 */\\n   void *fun;\\n   /* 输入端口 */\\n   void *p;   /* 指向luaG_errormsg结构体的指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机 */\\n   /* 状态变量 */\\n   ptrdiff_t errfunc; /* 当前错误处理函数的栈索引 */\\n   StkIdRel top; /* 栈中的第一个空闲槽 */\\n   /* 参数变量 */\\n   int LUA_ERRRUN; /* 运行时错误 */\\n} luaG_errormsg;\\n\\n#endif // __LUAG_ERRORMSG_H__\\n\",\n  \"h_file\": \"#include \\\"luaG_errormsg.h\\\"\\n\\nvoid luaG_errormsgFun(void *p)\\n{\\n    luaG_errormsg *pIp = (luaG_errormsg*)p;\\n    if (pIp->L->errfunc != 0) /* 检查是否存在错误处理函数 */\\n    {\\n        /* 调用错误处理函数 */\\n        luaD_callnoyield(pIp->L, pIp->L->top - 1, 0);\\n    }\\n    else\\n    {\\n        /* 默认错误处理 */\\n        luaD_throw(pIp->L, pIp->LUA_ERRRUN);\\n    }\\n    return;\\n}\\n\"\n}\n```"