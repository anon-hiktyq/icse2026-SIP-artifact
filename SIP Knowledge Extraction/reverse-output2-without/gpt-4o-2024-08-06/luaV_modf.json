"```json\n{\n  \"c_file\": \"#if !defined(__LUAV_MODF_H__)\\n#define __LUAV_MODF_H__\\n\\n#include \\\"lua.h\\\"\\n\\nvoid luaV_modfFun(void *p);\\n\\n/* 计算浮点数余数 */\\ntypedef struct __luaV_modf\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   lua_State *L;   /* Lua状态机指针 */\\n   lua_Number m;   /* 被除数 */\\n   lua_Number n;   /* 除数 */\\n   /* 输出端口 */\\n   lua_Number r;   /* 余数结果 */\\n   lua_Number *ret; /* 存储余数结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaV_modf;\\n\\n#endif // __LUAV_MODF_H__\\n\",\n  \"h_file\": \"#include \\\"luaV_modf.h\\\"\\n\\nvoid luaV_modfFun(void *p)\\n{\\n    luaV_modf *pIp = (luaV_modf*)p;\\n    \\n    if (pIp->n != 0) /* 检查除数是否为零 */\\n    {\\n        pIp->r = fmod(pIp->m, pIp->n); /* 计算余数 */\\n        if (pIp->ret != NULL)\\n        {\\n            *(pIp->ret) = pIp->r; /* 存储余数结果 */\\n        }\\n    }\\n    else\\n    {\\n        /* 错误处理：除数为零 */\\n        pIp->r = 0; /* 或者设置为其他错误值 */\\n        if (pIp->ret != NULL)\\n        {\\n            *(pIp->ret) = pIp->r;\\n        }\\n    }\\n    return;\\n}\"\n}\n```"