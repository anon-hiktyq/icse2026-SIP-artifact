"```json\n{\n  \"c_file\": \"#if !defined(__FINDSETREGFUN_H__)\\n#define __FINDSETREGFUN_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid findsetregFun(const Proto *p, int lastpc, int reg, int *ret);\\n\\n/* 分析指令序列，确定最后一个改变特定寄存器的指令 */\\ntypedef struct __FindSetReg\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const Proto *p;   /* 指向指令序列的指针 */\\n   int lastpc;       /* 最后一个指令的索引 */\\n   int reg;          /* 需要追踪的寄存器索引 */\\n   /* 输出端口 */\\n   int setreg;       /* 最后一个改变指定寄存器的指令索引 */\\n   int *ret;         /* 返回值指针，存储结果 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} FindSetReg;\\n\\n#endif // __FINDSETREGFUN_H__\\n\",\n  \"h_file\": \"#include \\\"FindSetReg.h\\\"\\n\\nvoid findsetregFun(const Proto *p, int lastpc, int reg, int *ret)\\n{\\n    FindSetReg *pIp = (FindSetReg*)p;\\n    int i;\\n    for (i = lastpc; i >= 0; --i)\\n    {\\n        // 假设有一个函数可以检查指令是否改变了特定寄存器\\n        if (InstructionChangesRegister(p, i, reg))\\n        {\\n            pIp->setreg = i;\\n            *(pIp->ret) = i;\\n            return;\\n        }\\n    }\\n    // 如果没有找到，设为-1\\n    pIp->setreg = -1;\\n    *(pIp->ret) = -1;\\n    return;\\n}\\n\"\n}\n```"