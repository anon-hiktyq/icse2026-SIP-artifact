"```json\n{\n    \"c_file\": \"#if !defined(__LUAF_PROTOSIZE_H__)\\n#define __LUAF_PROTOSIZE_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaF_protosizeFun(void *p);\\n\\n/* 计算Proto结构体大小 */\\ntypedef struct __luaF_protosize\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p; /* 指向luaF_protosize结构体的指针 */\\n   /* 输出端口 */\\n   lu_mem sz; /* 计算的Proto结构体大小 */\\n   lu_mem *ret; /* 存储计算结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   lu_byte flag; /* Proto结构体的标志位 */\\n   /* 参数变量 */\\n   int sizep; /* 子函数的数量 */\\n   int sizek; /* 常量的数量 */\\n   int sizelocvars; /* 局部变量的数量 */\\n   int sizeupvalues; /* 上值的数量 */\\n   int sizecode; /* 代码的大小 */\\n   int sizelineinfo; /* 行信息的大小 */\\n   int sizeabslineinfo; /* 绝对行信息的大小 */\\n} luaF_protosize;\\n\\n#endif // __LUAF_PROTOSIZE_H__\\n\",\n    \"h_file\": \"#include \\\"luaF_protosize.h\\\"\\n\\nvoid luaF_protosizeFun(void *p)\\n{\\n    luaF_protosize *pProto = (luaF_protosize*)p;\\n    \\n    // 初始化计算结果\\n    pProto->sz = 0;\\n\\n    // 根据标志位判断是否固定大小\\n    if (pProto->flag) {\\n        pProto->sz = pProto->sizep + pProto->sizek + pProto->sizelocvars + pProto->sizeupvalues + pProto->sizecode + pProto->sizelineinfo + pProto->sizeabslineinfo;\\n    }\\n\\n    // 存储计算结果\\n    *(pProto->ret) = pProto->sz;\\n    \\n    return;\\n}\\n\"\n}\n```"