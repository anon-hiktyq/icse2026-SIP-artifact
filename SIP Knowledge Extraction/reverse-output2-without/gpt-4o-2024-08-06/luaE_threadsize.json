"```json\n{\n  \"c_file\": \"#if !defined(__LUAETHREADSIZE_H__)\\n#define __LUAETHREADSIZE_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaE_threadsizeFun(lua_State *L);\\n\\n/* 计算 Lua 线程的大小 */\\ntypedef struct __LuaEThreadSize\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   lua_State *L;   /* Lua 状态结构体指针 */\\n   /* 输出端口 */\\n   lu_mem sz; /* 计算得到的线程大小 */\\n   lu_mem *ret; /* 存储线程大小的返回指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   int nci; /* 当前函数调用信息的数量 */\\n   /* 参数变量 */\\n   int EXTRA_STACK; /* 额外的堆栈空间大小 */\\n} LuaEThreadSize;\\n\\n#endif // __LUAETHREADSIZE_H__\",\n  \"h_file\": \"#include \\\"LuaEThreadSize.h\\\"\\n\\nvoid luaE_threadsizeFun(lua_State *L)\\n{\\n    LuaEThreadSize *pLua = (LuaEThreadSize*)L;\\n    \\n    /* 计算线程大小的逻辑 */\\n    pLua->sz = /* 计算逻辑 */;\\n    \\n    /* 将计算结果存储到返回指针 */\\n    if (pLua->ret != NULL) {\\n        *(pLua->ret) = pLua->sz;\\n    }\\n    \\n    return;\\n}\"\n}\n```"