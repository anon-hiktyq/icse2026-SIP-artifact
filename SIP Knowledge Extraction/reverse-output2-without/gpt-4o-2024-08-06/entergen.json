"```json\n{\n  \"c_file\": \"#if !defined(__ENTERGEN_H__)\\n#define __ENTERGEN_H__\\n\\n#include \\\"../../GC.h\\\"\\n\\nvoid entergenFun(void *p);\\n\\n/* 垃圾回收周期管理 */\\ntypedef struct __Entergen\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p; /* 指向 entergen 结构的指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua 状态结构 */\\n   global_State *g; /* 全局状态结构 */\\n   /* 状态变量 */\\n   const int GCSpause; /* 垃圾回收暂停状态 */\\n   const int GCSpropagate; /* 垃圾回收传播状态 */\\n   /* 参数变量 */\\n} Entergen;\\n\\n#endif // __ENTERGEN_H__\\n\",\n  \"h_file\": \"#include \\\"Entergen.h\\\"\\n\\nvoid entergenFun(void *p)\\n{\\n    Entergen *pGc = (Entergen*)p;\\n\\n    /* 启动并管理新的垃圾回收周期 */\\n    /* 执行垃圾回收相关操作 */\\n\\n    /* 更新 Lua 和全局状态结构 */\\n    pGc->L = updateLuaState(pGc->L);\\n    pGc->g = updateGlobalState(pGc->g);\\n\\n    /* 切换垃圾回收状态 */\\n    if (pGc->GCSpause)\\n    {\\n        /* 暂停垃圾回收 */\\n        pauseGC(pGc->g);\\n    }\\n    else if (pGc->GCSpropagate)\\n    {\\n        /* 传播垃圾回收 */\\n        propagateGC(pGc->g);\\n    }\\n\\n    return;\\n}\\n\"\n}\n```"