"```json\n{\n  \"c_file\": \"#if !defined(__LUAT_CALLTMFUN_H__)\\n#define __LUAT_CALLTMFUN_H__\\n\\n#include \\\"lua.h\\\"\\n\\nvoid luaT_callTMFun(lua_State *L, const TValue *f, const TValue *p1, const TValue *p2, const TValue *p3);\\n\\n/* 调用Lua元方法 */\\ntypedef struct __luaT_callTMFun\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   lua_State *L;       /* Lua状态 */\\n   const TValue *f;    /* 元方法函数值 */\\n   const TValue *p1;   /* 第一个参数 */\\n   const TValue *p2;   /* 第二个参数 */\\n   const TValue *p3;   /* 第三个参数 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   StkIdRel top;       /* 堆栈的第一个空闲槽 */\\n   /* 参数变量 */\\n} luaT_callTMFun;\\n\\n#endif // __LUAT_CALLTMFUN_H__\\n\",\n  \"h_file\": \"#include \\\"luaT_callTMFun.h\\\"\\n\\nvoid luaT_callTMFun(lua_State *L, const TValue *f, const TValue *p1, const TValue *p2, const TValue *p3)\\n{\\n    luaT_callTMFun *pIp = (luaT_callTMFun*)L;\\n    /* 将元方法推送到堆栈上，并根据上下文选择调用方式 */\\n    lua_pushcclosure(L, f, 0);\\n    lua_pushvalue(L, p1);\\n    lua_pushvalue(L, p2);\\n    lua_pushvalue(L, p3);\\n    lua_call(L, 3, 1);\\n    pIp->top = lua_gettop(L);\\n    return;\\n}\\n\"\n}\n```"