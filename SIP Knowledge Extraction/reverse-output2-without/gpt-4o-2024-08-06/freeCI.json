"```json\n{\n    \"c_file\": \"#if !defined(__FREECI_H__)\\n#define __FREECI_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid freeCIFun(void *p);\\n\\n/* 释放调用信息链表中的所有节点 */\\ntypedef struct __freeCI\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p; /* 指向需要释放的 freeCI 结构体的指针 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   CallInfo *ci; /* 当前函数的调用信息 */\\n   CallInfo *next; /* 下一个调用信息节点 */\\n   /* 参数变量 */\\n   lua_State *L; /* Lua 状态机，包含了调用信息链表 */\\n} freeCI;\\n\\n#endif // __FREECI_H__\\n\",\n    \"h_file\": \"#include \\\"freeCI.h\\\"\\n\\nvoid freeCIFun(void *p)\\n{\\n    freeCI *pCI = (freeCI*)p;\\n    CallInfo *ci = pCI->ci;\\n    CallInfo *next;\\n\\n    while (ci != NULL) {\\n        next = ci->next;\\n        // 假设有一个函数用于释放 CallInfo 节点\\n        freeCallInfo(ci);\\n        ci = next;\\n    }\\n\\n    return;\\n}\"\n}\n```"