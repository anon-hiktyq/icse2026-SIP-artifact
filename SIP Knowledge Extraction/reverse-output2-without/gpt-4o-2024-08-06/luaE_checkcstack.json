"```json\n{\n  \"c_file\": \"#if !defined(__LUAE_CHECKCSTACK_H__)\\n#define __LUAE_CHECKCSTACK_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaE_checkcstackFun(void *p);\\n\\n/* 检查C栈状态 */\\ntypedef struct __luaE_checkcstack\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p;   /* 指向luaE_checkcstack结构体的指针 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua的状态结构体 */\\n   /* 状态变量 */\\n   l_uint32 nCcalls; /* 嵌套C调用数量 */\\n} luaE_checkcstack;\\n\\n#endif // __LUAE_CHECKCSTACK_H__\\n\",\n  \"h_file\": \"#include \\\"luaE_checkcstack.h\\\"\\n\\nvoid luaE_checkcstackFun(void *p)\\n{\\n    luaE_checkcstack *pStack = (luaE_checkcstack*)p;\\n    // 检查栈溢出逻辑\\n    if (pStack->nCcalls >= MAX_C_CALLS) {\\n        luaL_error(pStack->L, \\\"C stack overflow\\\");\\n    }\\n    return;\\n}\"\n}\n```"