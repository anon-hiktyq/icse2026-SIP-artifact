"```json\n{\n  \"c_file\": \"#if !defined(__LUAC_RUNTILSTATE_H__)\\n#define __LUAC_RUNTILSTATE_H__\\n\\n#include \\\"../../lua.h\\\"\\n\\nvoid luaC_runtilstateFun(void *p);\\n\\n/* 执行垃圾收集状态转换 */\\ntypedef struct __luaC_runtilstate\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   int state;   /* 当前垃圾收集状态 */\\n   int fast;    /* 快速模式标志 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   lua_State *L; /* Lua状态机对象 */\\n   /* 状态变量 */\\n   lu_byte gcstate; /* 垃圾收集器当前状态 */\\n   lu_byte gckind;  /* 垃圾收集器类型 */\\n   /* 参数变量 */\\n} luaC_runtilstate;\\n\\n#endif // __LUAC_RUNTILSTATE_H__\\n\",\n  \"h_file\": \"#include \\\"luaC_runtilstate.h\\\"\\n\\nvoid luaC_runtilstateFun(void *p)\\n{\\n    luaC_runtilstate *pIp = (luaC_runtilstate*)p;\\n    \\n    /* 执行状态转换逻辑 */\\n    while (pIp->gcstate != pIp->state)\\n    {\\n        /* 根据快速模式标志选择转换逻辑 */\\n        if (pIp->fast)\\n        {\\n            /* 快速模式下的转换逻辑 */\\n        }\\n        else\\n        {\\n            /* 非快速模式下的转换逻辑 */\\n        }\\n        \\n        /* 更新垃圾收集器状态 */\\n        pIp->gcstate = /* 新状态 */;\\n    }\\n    \\n    return;\\n}\\n\"\n}\n```"