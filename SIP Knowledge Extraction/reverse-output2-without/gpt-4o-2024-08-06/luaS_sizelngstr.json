"```json\n{\n  \"c_file\": \"#if !defined(__LUAS_SIZELNGSTR_H__)\\n#define __LUAS_SIZELNGSTR_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid luaS_sizelngstrFun(void *p);\\n\\n/* 计算长字符串的大小 */\\ntypedef struct __luaS_sizelngstr\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   size_t len;   /* 长字符串的长度 */\\n   int kind;     /* 长字符串的类型 */\\n   /* 输出端口 */\\n   size_t *ret;  /* 存储计算结果的指针 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} luaS_sizelngstr;\\n\\n#endif // __LUAS_SIZELNGSTR_H__\\n\",\n  \"h_file\": \"#include \\\"luaS_sizelngstr.h\\\"\\n\\nvoid luaS_sizelngstrFun(void *p)\\n{\\n    luaS_sizelngstr *pIp = (luaS_sizelngstr*)p;\\n    \\n    /* 根据长字符串的类型选择不同的计算方式 */\\n    switch (pIp->kind)\\n    {\\n        case 0: /* 类型0的计算方式 */\\n            *pIp->ret = pIp->len * 2;\\n            break;\\n        case 1: /* 类型1的计算方式 */\\n            *pIp->ret = pIp->len * 3;\\n            break;\\n        default: /* 默认计算方式 */\\n            *pIp->ret = pIp->len;\\n            break;\\n    }\\n    \\n    return;\\n}\"\n}\n```"