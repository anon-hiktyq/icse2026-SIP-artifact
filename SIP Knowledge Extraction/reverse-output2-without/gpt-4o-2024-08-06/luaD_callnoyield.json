"```json\n{\n  \"c_file\": \"#if !defined(__LUAD_CALLNOYIELD_H__)\\n#define __LUAD_CALLNOYIELD_H__\\n\\n#include \\\"../../Lua.h\\\"\\n\\nvoid luaD_callnoyieldFun(void *p);\\n\\n/* 调用不可中断的Lua函数 */\\ntypedef struct __LuaDCallNoYield\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   void *p;          /* 指向luaD_callnoyield结构的指针 */\\n   int nResults;     /* 函数调用后期望的结果数量 */\\n   /* 输入输出端口 */\\n   lua_State *L;     /* Lua状态机 */\\n   StkId func;       /* 要调用的函数 */\\n   /* 状态变量 */\\n   TStatus status;   /* Lua线程的当前状态 */\\n   /* 参数变量 */\\n   int nyci;         /* 不可中断调用的标志 */\\n} LuaDCallNoYield;\\n\\n#endif // __LUAD_CALLNOYIELD_H__\\n\",\n  \"h_file\": \"#include \\\"LuaDCallNoYield.h\\\"\\n\\nvoid luaD_callnoyieldFun(void *p)\\n{\\n    LuaDCallNoYield *pIp = (LuaDCallNoYield*)p;\\n    \\n    // 这里是调用不可中断的Lua函数的逻辑\\n    // 例如：luaD_call(pIp->L, pIp->func, pIp->nResults);\\n    \\n    // 更新状态变量\\n    pIp->status = lua_status(pIp->L);\\n    \\n    return;\\n}\"\n}\n```"