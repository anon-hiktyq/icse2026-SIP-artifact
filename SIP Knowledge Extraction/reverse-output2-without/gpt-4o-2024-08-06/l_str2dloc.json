"```json\n{\n  \"c_file\": \"#if !defined(__L_STR2DLOC_H__)\\n#define __L_STR2DLOC_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid l_str2dlocFun(void *p);\\n\\n/* 字符串转换为数字相关结构体 */\\ntypedef struct __L_Str2Dloc\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const char *s; /* 输入的字符串 */\\n   int mode;      /* 转换模式 */\\n   /* 输出端口 */\\n   const char *ret; /* 转换结果指针 */\\n   /* 输入输出端口 */\\n   lua_Number *result; /* 转换后的数字结果 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} L_Str2Dloc;\\n\\n#endif // __L_STR2DLOC_H__\\n\",\n  \"h_file\": \"#include \\\"L_Str2Dloc.h\\\"\\n\\nvoid l_str2dlocFun(void *p)\\n{\\n    L_Str2Dloc *pIp = (L_Str2Dloc*)p;\\n\\n    /* 根据模式选择转换方式 */\\n    switch (pIp->mode) {\\n        case 0:\\n            /* 模式0转换逻辑 */\\n            break;\\n        case 1:\\n            /* 模式1转换逻辑 */\\n            break;\\n        default:\\n            /* 默认转换逻辑 */\\n            break;\\n    }\\n\\n    /* 将转换结果存储到result并设置ret指向字符串尾部或NULL */\\n    /* 示例逻辑：假设转换成功 */\\n    *pIp->result = 123.45; /* 示例数字结果 */\\n    pIp->ret = pIp->s + strlen(pIp->s); /* 指向字符串尾部 */\\n\\n    return;\\n}\\n\"\n}\n```"