"```json\n{\n    \"c_file\": \"#if !defined(__LUAF_GETLOCALNAME_H__)\\n#define __LUAF_GETLOCALNAME_H__\\n\\n#include \\\"../../lua.h\\\"\\n\\nconst char* luaF_getlocalnameFun(const Proto* f, int local_number, int pc);\\n\\n/* 获取指定程序计数器下活动的局部变量名称 */\\ntypedef struct __LuaFGetLocalName\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const Proto* f;    /* 函数原型信息，包含局部变量信息 */\\n   int local_number;  /* 要查找的局部变量序号 */\\n   int pc;            /* 程序计数器，用于确定变量是否活跃 */\\n   /* 输出端口 */\\n   const char* ret;   /* 找到的局部变量的名称，若未找到则为NULL */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   /* 参数变量 */\\n} LuaFGetLocalName;\\n\\n#endif // __LUAF_GETLOCALNAME_H__\\n\",\n    \"h_file\": \"#include \\\"LuaFGetLocalName.h\\\"\\n\\nconst char* luaF_getlocalnameFun(const Proto* f, int local_number, int pc)\\n{\\n    LuaFGetLocalName *pIp = (LuaFGetLocalName*)p;\\n    int i;\\n\\n    for (i = 0; i < f->size; i++)\\n    {\\n        if (f->locvars[i].startpc <= pc && pc < f->locvars[i].endpc)\\n        {\\n            if (--local_number == 0)\\n            {\\n                pIp->ret = f->locvars[i].varname;\\n                return pIp->ret;\\n            }\\n        }\\n    }\\n    pIp->ret = NULL;\\n    return pIp->ret;\\n}\"\n}\n```"