"```json\n{\n  \"c_file\": \"#if !defined(__SAMSUBMODEDAMP_H__)\\n#define __SAMSUBMODEDAMP_H__\\n\\n#include \\\"../../IP.h\\\"\\n\\nvoid SAMSubModeDampFun(SAMSubModeDamp *p);\\n\\n/* SAMSubModeDampFun函数用于根据输入的速率和最大值计算fabsmax，并根据条件更新计数器和模式标志。 */\\ntypedef struct __SAMSubModeDamp\\n{\\n   /* 接口函数 */\\n   Fun fun;\\n   /* 输入端口 */\\n   const float32 *rate; /* 输入速率数组 */\\n   const float32 max;   /* 最大值 */\\n   unint32 countPublic; /* 公共计数器 */\\n   unint32 countMode;   /* 模式计数器 */\\n   /* 输出端口 */\\n   /* 输入输出端口 */\\n   /* 状态变量 */\\n   unint32 flgMode;     /* 模式标志 */\\n   /* 参数变量 */\\n} SAMSubModeDamp;\\n\\n#endif // __SAMSUBMODEDAMP_H__\\n\",\n  \"h_file\": \"#include \\\"SAMSubModeDamp.h\\\"\\n\\nvoid SAMSubModeDampFun(SAMSubModeDamp *p)\\n{\\n    float32 fabsmax = 0.0f;\\n    for (unint32 i = 0; i < sizeof(p->rate) / sizeof(p->rate[0]); i++)\\n    {\\n        float32 fabsRate = fabs(p->rate[i]);\\n        if (fabsRate > fabsmax)\\n        {\\n            fabsmax = fabsRate;\\n        }\\n    }\\n\\n    if (fabsmax > p->max)\\n    {\\n        p->countPublic++;\\n        p->countMode++;\\n        p->flgMode = 1;\\n    }\\n    else\\n    {\\n        p->flgMode = 0;\\n    }\\n\\n    return;\\n}\\n\"\n}\n```"